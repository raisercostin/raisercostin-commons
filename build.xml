<?xml version="1.0" encoding="UTF-8"?>
<project name="common" default="dist" basedir=".">
	<property 
		name="buildFile.version" 
		value="1.6" 
		description="Build file version."/>
	<taskdef name="if" classname="ise.antelope.tasks.IfTask" description="This is an antelope task."/>

	<!--Don't change the order.-->
	<property file="build.version.properties"   description="Load project version properties."/>
	<property file="build.properties" 			description="Load project properties place."/>
	<property file="${build.local.properties}"  description="Load local properties."/>

	<!--names-->
	<property name="app.version" 	
		value="${app.version.major}.${app.version.minor}"
		description="Aplication version."/>

	<property name="app.longName" 	
		value="${app.uniqueName}-v.${app.version}-b.${app.build}-d.${app.date}-t.${app.type}"
		description="Application long name. Unique name in time also."/>

	<property name="name.dist.bin"  value="${app.longName}.zip"
		description="Distribute binary archive."/>

	<property name="name.dist.jar" 	value="${app.longName}.orig.jar"
		description="Distribute binary jar archive."/>

	<property name="name.dist.obfuscated.jar" 	
									value="${app.longName}.jar"
		description="Distribute obfuscated binary jar archive."/>

	<property name="name.dist.war" 	value="${app.longName}.war"
		description="Distribute binary war archive (WebServers format)."/>

	<property name="name.dist.src" 	value="${app.longName}.src.zip"
		description="Distribute source archive."/>

	<property name="name.dist.srcdoc" value="${app.longName}.srcdoc.zip"
		description="Distribute source and generated documentation archive."/>

	<property name="name.dist.web" 	value="${app.longName}.web.zip"
		description="Distribute web site for this project."/>

	<!--archive directories (with generated content)-->
	<property name="dir.arch" 	value="arch" 		description=""/>
	<property name="dir.old" 	value="old" 			description=""/>

	<!--source directories-->
	<property name="dir.src" 		value="src/java"	description="Source files."/>
	<property name="dir.src.test"	value="src/test"	description="Source test files."/>
	<property name="dir.src.web"	value="src\web"		description="Source web files."/>
	<property name="dir.doc" 		value="doc" 		description="Documentation files."/>
	<property name="dir.doc.web"	value="doc/web"		description="Internet web pages."/>
	<property name="dir.res" 		value="res" 		description="Resource files."/>
	<property name="dir.web" 		value="web" 		description="Web files."/>
	<property name="dir.etc" 		value="etc" 		description="Configuration and other files."/>
	<property name="dir.test" 		value="test" 	description="Test help files."/>

	<property name="dir.src.all" value="${dir.src};${dir.src.test}"/>

	<!--temporary directories (with generated content)-->
	<property name="dir.bin" 		value="bin" 		description="Binary generated files."/>
	<property name="dir.build" 		value="build" 	description="Build (bin, res, etc) files. All files necessary to directly run the application."/>
	<property name="dir.dist" 		value="dist"		description="Distribution (build, doc, web) files. All files necessary to directly run and use the application."/>
	<property name="dir.doc.api" 	value="doc\api"/>
	<property name="dir.doc.tags" 	value="doc\tags"/>
	<property name="dir.build.web"  value="um-war"/>

	<property name="dir.temp"		value="temp"		description="Temp dir."/>
	<property name="dir.temp.web"	value="temp\web"	description="Temp dir for web distribution."/>
	<property name="dir.var"		value="var"			description="Temp dir."/>

	<property name="option.javadoc.regenerate"	value="false"/>
	<property name="option.shrink" 				value="true"/>

	<property name="jarname" value="${app.longName}"/>

	<path id="compile.classpath">
		<fileset dir="${dir.repository.lib}" includes="${classpath}"/>
	</path>
	<property name="compile.classpath" refid="compile.classpath"/>

	<!-- sign applet properties -->
	<property name="sign.keyStorage" value="${dir.dist}/redpoint.key"/>
	<property name="sign.keyPass" value="redpoint1"/>
	<property name="sign.dname" value="cn=Redpoint"/>
	<property name="sign.storePass" value="redpoint2"/>
	<property name="sign.signedJar" value="${dir.dist}/factoryApplet.jar"/>
	<property name="sign.unsignedJar" value="${dir.dist}/${name.dist.jar}"/>
	<!--property name="sign.unsignedJar" value="${dir.dist}/${name.dist.obfuscated.jar}"/-->
	<property name="sign.certificate" value="${dir.dist}/redpoint.cer"/>
	<property name="sign.alias" value="redpoint.factory"/>

	<!--targets-->
	<target name="clean"
		description="Clean generated files and directories.">
			
		<delete dir="${dir.bin}" failonerror="no"/>
		<delete dir="${dir.build}" failonerror="no"/>
		<delete dir="${dir.dist}" failonerror="no"/>
		<delete dir="${dir.doc.api}" failonerror="no" />
		<delete dir="${dir.doc.tags}" failonerror="no"/>
		<delete dir="${dir.temp}" failonerror="no"/>
	</target>

	<target name="prepare.newVersion"
		description="Save project vesrions.Increment build number, and store current timestamp.">
		<tstamp>
			<format property="timestamp" pattern="yyyyMMddHHmmss"/>
		</tstamp>
		<propertyfile
		    file="build.version.properties"
		    comment="${app.name} properties">
			<entry  
				key="app.build" 
				type="int" 
				default="0000" 
				operation="+" 
				pattern="0000"/>
			<entry
				key="app.date"
				type="string"
				value="${timestamp}"/>
		</propertyfile>
	</target>
	<target name="prepare.srcVersion"
		description="Web update.">
		<property name="replace" value=
		"//ant.version.begin (\2)&#xD;&#xA;
	    \2 String appName          =&quot;${app.name}&quot;;&#xD;&#xA;
	    \2 String appUniqueName    =&quot;${app.uniqueName}&quot;;&#xD;&#xA;
	    \2 String appLongName      =&quot;${app.longName}&quot;;&#xD;&#xA;
	    \2 String appVersionMajor  =&quot;${app.version.major}&quot;;&#xD;&#xA;
	    \2 String appVersionMinor  =&quot;${app.version.minor}&quot;;&#xD;&#xA;
	    \2 String appVersion       =&quot;${app.version}&quot;;&#xD;&#xA;
	    \2 String appBuild         =&quot;${app.build}&quot;;&#xD;&#xA;
	    \2 String appDate          =&quot;${app.date}&quot;;&#xD;&#xA;
	    \2 String appType          =&quot;${app.type}&quot;;&#xD;&#xA;
	    //ant.version.end"/>
		<property name="match" value="//ant[.]version[.]begin (\s*[(]((\s|\d|\w)*)[)]\s*)?(.*)//ant[.]version[.]end"/>
		<replaceregexp 
			match="${match}"
			replace="${replace}"
			flags="msgi">
			<!--fileset dir="" includes="${dir.src.all}"/-->
			<!--fileset dir="" includes="**/*.java"/-->
			<fileset dir="${dir.src.all}" includes="**/*.java"/>
		</replaceregexp>
	</target>

	<target name="compile" depends="prepare.srcVersion"
		description="Compile Java sources.">
		<echo message="The classpath is '${compile.classpath}'."/>
		<mkdir dir="${dir.bin}"/>
		<javac 
			destdir="${dir.bin}"
			debug="on" 
			optimize="off" 
			deprecation="off"
			compiler="javac1.4"
			source="1.4"
			target="1.4"
			classpathref="compile.classpath"
			verbose="false"
			>
			<src path="${dir.src.all}"/>
		</javac>
	</target>
	<target name="doc.api" depends="compile"
		description="Create Javadoc API documentation.">
		<if name="${option.javadoc.regenerate}" value="true">
			<antcall target="doc.api.always"/>
		</if>
	</target>
	<target name="doc.api.always" depends="compile"
		description="Create Javadoc API documentation.">
		<mkdir dir="${dir.doc.api}"/>
		<javadoc 
			destdir="${dir.doc.api}" 
			access="private" 
			source="1.4"
		    use="true"
		    notree="false" 
		    nonavbar="false" 
		    noindex="false"
		    splitindex="true" 
		    author="true" 
		    version="true"
		    nodeprecatedlist="false" 
		    nodeprecated="false"
		    packagenames="*"
		    sourcepath="${dir.src.all}"
		    classpath="${classpath}"
		    doctitle="${app.name} API">
		</javadoc>
	</target>
	<target name="build" depends="compile" 
		description="Make build directory.">
		<mkdir dir="${dir.build}"/>
		<copy todir="${dir.build}" failonerror="false">
			<fileset dir="${dir.bin}">
				<present targetdir="${dir.bin}"/>
			</fileset>
		</copy>
		<available property="available" file="${dir.web}"/>
		<if name="available" value="true">
			<mkdir dir="${dir.build}/web"/>
			<copy todir="${dir.build}/web" failonerror="false">
				<fileset dir="${dir.web}"/>
			</copy>
		</if>
		<available property="available" file="${dir.res}"/>
		<if name="available" value="true">
			<mkdir dir="${dir.build}/res"/>
			<copy todir="${dir.build}/res" failonerror="false">
				<fileset dir="${dir.res}"/>
			</copy>
		</if>
	</target>
	<target name="dist" depends="dist.src,dist.src&amp;docs,dist.web,archive" description="Distribute all."/>
	<target name="dist.src" 
		description="Distribute sources.">
		<mkdir dir="${dir.dist}"/>
		<zip 
			zipfile="${dir.dist}/${name.dist.src}" 
			basedir="${basedir}"
			excludes="**/CVS/*,
				${dir.doc.api}/**,
				${dir.bin}/**,
				${dir.build}/**,
				${dir.dist}/**,
				${dir.doc.api}/**,
				${dir.doc.tags}/**,
				${dir.temp}/**,
				${dir.temp.web}/**,
				${dir.arch}/**,
				${dir.old}/**,
				${dir.var}/**"/>
	</target>
	<target name="dist.src&amp;docs" depends="doc.api" 
		description="Distribute sources and generated documentation.">
		<mkdir dir="${dir.dist}"/>
		<zip 
			zipfile="${dir.dist}/${name.dist.srcdoc}" 
			basedir="${basedir}" 
			excludes="**/CVS/*,
				${dir.doc.api}/**,
				${dir.bin}/**,
				${dir.build}/**,
				${dir.dist}/**,
				${dir.temp}/**,
				${dir.temp.web}/**,
				${dir.arch}/**,
				${dir.old}/**,
				${dir.var}/**"/>
	</target>
	<target name="dist.jar"
		description="Distribute jars.">
		<antcall target="dist.orig.jar"/>
		<if name="option.shrink" value="true">
			<antcall target="shrink"/>
			<delete file="${dir.dist}/${name.dist.jar}"/>
			<move file="${dir.dist}/${name.dist.obfuscated.jar}" tofile="${dir.dist}/${name.dist.jar}"/>
		</if>
	</target>
	<target name="dist.orig.jar" depends="build"
		description="Distribute jars.">
		<mkdir dir="${dir.dist}"/>
		<available property="available" file="${dir.etc}/MANIFEST.MF" type="file"/>
		<if name="available">
		<jar 
			jarfile="${dir.dist}/${name.dist.jar}"
			manifest="${dir.etc}/MANIFEST.MF"
			basedir="${dir.build}"/>
		</if>
		<if name="available" exists="false">
			<jar 
				jarfile="${dir.dist}/${name.dist.jar}"
				basedir="${dir.build}"/>
		</if>
	</target>	
	<target name="shrink" depends="dist.orig.jar"
		description="Shrink and obfuscate jar file.">
		<delete dir="temp/jshrink" failonerror="no"/>
		<mkdir dir="temp/jshrink"/>
		<unjar src="${dir.temp.lib}/webcore.jar" dest="temp/jshrink"/>
		<unjar src="${dir.dist}/${name.dist.jar}" dest="temp/jshrink"/>
		<delete>
			<fileset dir="temp/jshrink" includes="*.xml"/>
		</delete>
		<jar
			jarfile="${dir.dist}/${name.dist.jar}"
			manifest="${dir.etc}/MANIFEST.MF"
			basedir="temp/jshrink"/>

		<exec executable="java">
			<arg line="-jar"/>
			<arg line="${dir.jshrink}/jshrink.exe"/>
			<arg line="${dir.dist}/${name.dist.jar}"/>
			<arg line="-o"/>
			<arg line="${dir.dist}/${name.dist.obfuscated.jar}"/>
			<arg line="-classpath"/>
			<arg line="${classpath}"/>
		</exec>
	</target>	
	<target name="sign.generate">
		<exec executable="keytool">
			<arg line="-genkey"/>
			<arg line="-alias"/>
			<arg line="${sign.alias}"/>
			<arg line="-keystore"/>
			<arg line="${sign.keyStorage}"/>
			<arg line="-keypass"/>
			<arg line="${sign.keyPass}"/>
			<arg line="-dname"/>
			<arg line="${sign.dname}"/>
			<arg line="-storepass"/>
			<arg line="${sign.storePass}"/>
		</exec>
		<exec executable="keytool">
			<arg line="-export"/>
			<arg line="-keystore"/>
			<arg line="${sign.keyStorage}"/>
			<arg line="-storepass"/>
			<arg line="${sign.storePass}"/>
			<arg line="-alias"/>
			<arg line="${sign.alias}"/>
			<arg line="-file"/>
			<arg line="${sign.certificate}"/>
		</exec>
	</target>
	<target name="sign" depends="shrink,sign.generate"
		description="Sign jar file.">
		<exec executable="jarsigner">
			<arg line="-keystore"/>
			<arg line="${sign.keyStorage}"/>
			<arg line="-storepass"/>
			<arg line="${sign.storePass}"/>
			<arg line="-keypass"/>
			<arg line="${sign.keyPass}"/>
			<arg line="-signedjar"/>
			<arg line="${sign.signedJar}"/>
			<arg line="${sign.unsignedJar}"/>
			<arg line="${sign.alias}"/>
		</exec>
		<exec executable="jarsigner">
			<arg line="-keystore"/>
			<arg line="${sign.keyStorage}"/>
			<arg line="-storepass"/>
			<arg line="${sign.storePass}"/>
			<arg line="-keypass"/>
			<arg line="${sign.keyPass}"/>
			<arg line="-signedjar"/>
			<arg line="${dir.dist}/msbase-signed.jar"/>
			<arg line="${dir.common.lib}/jdbc/jars/msbase.jar"/>
			<arg line="${sign.alias}"/>
		</exec>
		<exec executable="jarsigner">
			<arg line="-keystore"/>
			<arg line="${sign.keyStorage}"/>
			<arg line="-storepass"/>
			<arg line="${sign.storePass}"/>
			<arg line="-keypass"/>
			<arg line="${sign.keyPass}"/>
			<arg line="-signedjar"/>
			<arg line="${dir.dist}/msutil-signed.jar"/>
			<arg line="${dir.common.lib}/jdbc/jars/msutil.jar"/>
			<arg line="${sign.alias}"/>
		</exec>
		<exec executable="jarsigner">
			<arg line="-keystore"/>
			<arg line="${sign.keyStorage}"/>
			<arg line="-storepass"/>
			<arg line="${sign.storePass}"/>
			<arg line="-keypass"/>
			<arg line="${sign.keyPass}"/>
			<arg line="-signedjar"/>
			<arg line="${dir.dist}/mssqlserver-signed.jar"/>
			<arg line="${dir.common.lib}/jdbc/jars/mssqlserver.jar"/>
			<arg line="${sign.alias}"/>
		</exec>
	</target>	
	<target name="dist.web.update"
		description="Web update.">
		<mkdir dir="${dir.temp}"/>
		<propertyfile file="${dir.temp}/temp.property">
			<entry key="name.dist.src" value="${name.dist.src}"/>
			<entry key="name.dist.jar" value="${name.dist.jar}"/>
			<entry key="app.shortName" value="${app.shortName}"/>
			<entry key="app.longName"  value="${app.longName}"/>
		</propertyfile>
		<mkdir dir="${dir.temp.web}"/>
		<copy todir="${dir.temp.web}" >
			<fileset dir="${dir.doc.web}"/>
		</copy>
		<replace
			dir="${dir.temp.web}"
			propertyFile="${dir.temp}/temp.property">
			<include name="**/*.html"/>
			<replacefilter 
			    token="$${name.dist.src}" 
			    property="name.dist.src"/>
			<replacefilter 
			    token="$${name.dist.jar}" 
			    property="name.dist.jar"/>
			<replacefilter 
			    token="$${app.shortName}" 
			    property="app.shortName"/>
			<replacefilter 
			    token="$${app.longName}" 
			    property="app.longName"/>
		</replace>
		<delete file="${dir.temp}/temp.property" failonerror="false"/>
	</target>
	<target name="dist.web" depends="dist.src,dist.jar" 
		description="Distribute for a web location.">
		<mkdir dir="${dir.temp.web}"/>
		<copy todir="${dir.temp.web}" file="${dir.dist}/${name.dist.jar}"/>
		<copy todir="${dir.temp.web}" file="${dir.dist}/${name.dist.src}"/>
		<available file="${dir.doc.web}" property="available" type="dir"/>
		<if name="available">
		<copy todir="${dir.temp.web}">
		    <fileset dir="${dir.doc.web}"/>
		</copy>
		<antcall target="dist.web.update"/>
		</if>
		<mkdir dir="${dir.dist}"/>
		<zip 
			zipfile="${dir.dist}/${name.dist.web}" 
			basedir="${dir.temp.web}"/>
		<delete dir="${dir.temp}" failonerror="false"/>
	</target>
	<target name="archive"
		description="Move all distribution files to arch directory.">
		<available property="available" file="${dir.dist}"/>
		<if name="available">
		<mkdir dir="${dir.arch}"/>
		<move todir="${dir.arch}">
			<fileset dir="${dir.dist}"/>
		</move>
		</if>
	</target>
	<target 
		name="archive.project"
		depends="clean,dist.src"
		description="Move all project files to an archive in arch directory.">
		<available property="available" file="${dir.dist}"/>
		<if name="available">
			<mkdir dir="${dir.arch}"/>
			<move todir="${dir.arch}">
				<fileset dir="${dir.dist}"/>
			</move>
		</if>
	</target>
	<target name="dist.archive"
		depends="dist,archive"
		description="Create distribution files to arch directory.">
	</target>
	<target name="site.clean" depends="" 
		description="Delete project from local site.">
		<delete dir="${dir.deploy.site}"/>
	</target>
	<target name="app.clean" depends="" 
		description="Delete project from local path.">
		<delete dir="${dir.deploy.app}"/>
	</target>
	<target name="site.deploy" depends="dist" 
		description="Deploys project to local site.">
		<mkdir dir="${dir.deploy.site}"/>
		<copy todir="${dir.deploy.site}">
			<fileset dir="${dir.dist}"/>
		</copy>
	</target>
	<target 
		name="deploy.site"
		depends="dist.web"
		description="Deploys the web archive to a site using copy.">
		<mkdir dir="${dir.site.local}/${app.name}"/>
		<unzip src="${dir.dist}/${name.dist.web}" dest="${dir.site.local}/${app.name}"/>
	</target>
	<target name="all.deploy" depends="all.clean,app.deploy,site.deploy" 
		description="Deploys project to local site.">
	</target>
	<target name="all.clean" depends="clean,app.clean,site.clean" 
		description="Deploys project to local site.">
	</target>
	<target name="app.deploy" depends="dist" 
		description="Deploys project to local path.">
		<mkdir dir="${dir.deploy.app}"/>
		<copy todir="${dir.deploy.app}">
			<fileset dir="${dir.dist}"/>
		</copy>
	</target>
	<target name="applet.deploy" depends="sign,htmlconvertor" 
		description="Deploys applet to ${dir.build.web} path.">
		<delete>
			<fileset dir="${dir.build.web}/applets" includes="*.jar"/>
			<fileset dir="${dir.build.web}/applets" includes="factory.jsp"/>
		</delete>
		<mkdir dir="${dir.build.web}/applets"/>
		<copy todir="${dir.build.web}/applets" file="${sign.signedJar}"/>
		<copy todir="${dir.build.web}/applets" file="${dir.dist}/msbase-signed.jar"/>
		<copy todir="${dir.build.web}/applets" file="${dir.dist}/msutil-signed.jar"/>
		<copy todir="${dir.build.web}/applets" file="${dir.dist}/mssqlserver-signed.jar"/>
		<copy tofile="${dir.build.web}/applets/factory.jsp" file="${dir.temp.web}/factory.html"/>
	</target>
	<target name="app.redeploy" depends="app.clean,clean,app.deploy" 
		description="Deploys project to local path.">
	</target>
	<target name="htmlconvertor" depends="" 
		description="Deploys project to local site.">
		<mkdir dir="${dir.temp.web}"/>
		<copy tofile="${dir.temp.web}/factory.html" file="${dir.src.web}/applets/factory.jsp"/>
		<exec executable="HtmlConverter.exe">
			<arg line="-source"/>
			<arg line="${dir.temp.web}"/>
			<arg line="-dest"/>
			<arg line="${dir.temp.web}"/>
		</exec>
		<delete dir="${dir.temp.web}_BAK"/>
	</target>
</project>
